<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>WHAT KIND OF DEV ARE YOU</title><subtitle>Personal blog above Game Development and related things.</subtitle> <updated>2022-08-09T09:53:17+03:00</updated> <author> <name>Konstantin Tomashevich</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Konstantin Tomashevich </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Emergence: Memory management</title><link href="/posts/EmergenceMemoryManagement/" rel="alternate" type="text/html" title="Emergence: Memory management" /><published>2022-08-09T09:30:00+03:00</published> <updated>2022-08-09T09:30:00+03:00</updated> <id>/posts/EmergenceMemoryManagement/</id> <content src="/posts/EmergenceMemoryManagement/" /> <author> <name>Konstantin Tomashevich</name> </author> <category term="Emergence" /> <category term="Development Log" /> <summary> It is very important to have consistent memory model for your project from the start, because it is almost impossible to change it later. In this post I will talk about Emergence memory management library and its design decisions. Motivation Having the right approach to managing memory is crucial for performance: it impacts both allocation cost and cache coherency. Of course, you can just all... </summary> </entry> <entry><title>Emergence: Reflection</title><link href="/posts/EmergenceReflection/" rel="alternate" type="text/html" title="Emergence: Reflection" /><published>2022-07-23T13:50:00+03:00</published> <updated>2022-07-23T13:50:00+03:00</updated> <id>/posts/EmergenceReflection/</id> <content src="/posts/EmergenceReflection/" /> <author> <name>Konstantin Tomashevich</name> </author> <category term="Emergence" /> <category term="Development Log" /> <summary> Reflection system is an important part of every engine, but there is no standard solution for that in C++: there are lots of libraries with their pros and cons. I’ve decided to write my own reflection for Emergence and I will describe it in this post. Motivation It’s impossible to underestimate how useful good reflection system could be: reflection provides wide variety of tools to make cod... </summary> </entry> <entry><title>Tutorial: String interning</title><link href="/posts/TutorialStringInterning/" rel="alternate" type="text/html" title="Tutorial: String interning" /><published>2022-07-12T21:30:00+03:00</published> <updated>2022-07-12T21:30:00+03:00</updated> <id>/posts/TutorialStringInterning/</id> <content src="/posts/TutorialStringInterning/" /> <author> <name>Konstantin Tomashevich</name> </author> <category term="Tutorials" /> <category term="Memory" /> <summary> Is there a lot of instances of the same string in your application that are wasting lots of space? Or are you checking equality or hashing strings quite often and wondering how to do it more efficiently? Fortunately, string interning comes to the rescue! Motivation Let’s start from describing two most common cases where string interning helps us a lot. Strings are much more informative for ... </summary> </entry> <entry><title>Problem solving: Validating ECS graph</title><link href="/posts/ProblemSolvingValidatingECSGraph/" rel="alternate" type="text/html" title="Problem solving: Validating ECS graph" /><published>2022-07-06T15:15:00+03:00</published> <updated>2022-07-06T15:15:00+03:00</updated> <id>/posts/ProblemSolvingValidatingECSGraph/</id> <content src="/posts/ProblemSolvingValidatingECSGraph/" /> <author> <name>Konstantin Tomashevich</name> </author> <category term="Tutorials" /> <category term="Algorithms" /> <summary> Designing algorithms is quite rare task, so it is always feels great when you can apply this skill to solve some practical problem. In this post I’ll talk about ECS graph validation algorithm that I’ve written for Emergence project. Problem definition Let’s start from defining properties of ECS system: List of resources to which system has read-only access. List of resources to which sy... </summary> </entry> <entry><title>Tutorial: Link-time polymorphism basics</title><link href="/posts/TutorialLinkTimePolymorphismBasics/" rel="alternate" type="text/html" title="Tutorial: Link-time polymorphism basics" /><published>2022-07-01T15:15:00+03:00</published> <updated>2022-07-01T15:15:00+03:00</updated> <id>/posts/TutorialLinkTimePolymorphismBasics/</id> <content src="/posts/TutorialLinkTimePolymorphismBasics/" /> <author> <name>Konstantin Tomashevich</name> </author> <category term="Tutorials" /> <category term="Architecture" /> <summary> Everyone knows what runtime and compile time polymorphisms are, but what about link-time polymorphism? There is much less materials about this type of polymorphism and it seems almost forgotten. So I’ve decided to write tutorial about its basics. What link-time polimorphism is? Runtime polymorphism operates on top of virtual methods, lambdas and function pointers. Compile time polymorphism u... </summary> </entry> </feed>
